{"version":3,"sources":["components/graph.tsx","app.tsx","index.tsx"],"names":["ActionType","initialState","nodes","edges","GraphContext","createContext","graphReducer","state","action","type","UpdatePosition","newState","index","findIndex","node","uid","push","x","y","UpdateAttribute","AddEdge","Node","children","useContext","getPosition","dispatch","useState","dragging","initial","current","setDragging","left","top","style","position","background","userSelect","onMouseDown","e","clientX","clientY","onMouseMove","onMouseUp","updatePosition","useNode","useUID","args","GraphComponent","width","height","useReducer","Provider","value","find","backgroundColor","color","overflow","GenericNode1","padding","GenericNode2","App","num","setNum","repeat","split","map","_","i","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8fa7f7fa.chunk.js","sourcesContent":["import React, { createContext, useContext, useReducer, useState } from 'react';\nimport { useUID } from 'react-uid';\n\ninterface Graph {\n\tnodes: any[];\n\tedges: any[];\n}\n\nconst initialState : Graph = {\n\tnodes: [],\n\tedges: [],\n}\n\nconst GraphContext = createContext<{\n\tstate?: Graph;\n\tdispatch?: Function;\n\tgetPosition?: Function;\n}>({});\n\nenum ActionType {\n\tUpdatePosition,\n\tUpdateAttribute,\n\tAddEdge,\n\tRemoveEdge,\n};\n\ntype Uid = string;\n\ntype Actions =\n | { type: ActionType.UpdatePosition, uid: Uid, x: Number, y: Number }\n | { type: ActionType.UpdateAttribute, uid: Uid, key: String, value: any }\n | { type: ActionType.AddEdge, fromNode: Uid, toNode: Uid };\n\nconst graphReducer = (state : Graph, action: Actions) => {\n\tswitch(action.type) {\n\t\tcase ActionType.UpdatePosition:\n\t\t\tconst newState = { ...state };\n\t\t\tconst index = state.nodes.findIndex((node) => node.uid === action.uid);\n\t\t\tif(index === -1) {\n\t\t\t\tnewState.nodes.push({uid: action.uid, x: action.x, y: action.y});\n\t\t\t} else {\n\t\t\t\tnewState.nodes[index].x = action.x;\n\t\t\t\tnewState.nodes[index].y = action.y;\n\t\t\t}\n\t\t\treturn newState;\n\t\tcase ActionType.UpdateAttribute:\n\t\tcase ActionType.AddEdge:\n\t\tdefault:\n\t\t\tbreak;\n\t}\n\n\treturn state;\n};\n\nconst updatePosition = (uid: Uid, x: Number, y: Number) => ({ type: ActionType.UpdatePosition, uid, x, y });\n\ninterface GraphComponentProps {\n\twidth: Number,\n\theight: Number,\n}\n\nconst GraphComponent : React.FC<GraphComponentProps> = ({ children, width, height }) => {\n\tconst [state, dispatch] = useReducer(graphReducer, initialState);\n\tconst getPosition = (uid: Uid) => {\n\t\tconst node = state.nodes.find((node) => node.uid === uid);\n\t\tconst defaultValues = { x: 0, y: 0 };\n\t\treturn { ...defaultValues, ...node };\n\t}\n\n\treturn <GraphContext.Provider value={{\n\t\tstate,\n\t\tdispatch,\n\t\tgetPosition,\n\t}}>\n\t\t<div style={{\n\t\t\twidth: `${width}px`,\n\t\t\theight: `${height}px`,\n\t\t\tbackgroundColor: 'darkblue',\n\t\t\tcolor: '#eaeaea',\n\t\t\tposition: 'relative',\n\t\t\toverflow: 'hidden',\n\t\t}}>\n\t\t{children}\n\t\t</div>\n\t</GraphContext.Provider>\n};\n\ninterface NodeProps {\n\tuid: Uid\n}\n\nconst Node : React.FC<NodeProps> = ({ children, uid }) => {\n\tconst { getPosition, dispatch } = useContext(GraphContext);\n\tconst {x, y } = getPosition!(uid);\n\tconst [dragging, setDragging ] = useState({\n\t\tdragging: false,\n\t\tinitial: { x: 0, y: 0 },\n\t\tcurrent: { x: 0, y: 0 },\n\t});\n\tconst onMouseDown = (e : React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n\t\tsetDragging({\n\t\t\tdragging: true,\n\t\t\tinitial: {\n\t\t\t\tx: e.clientX,\n\t\t\t\ty: e.clientY,\n\t\t\t},\n\t\t\tcurrent: {\n\t\t\t\tx: e.clientX,\n\t\t\t\ty: e.clientY,\n\t\t\t}\n\t\t})\n\t};\n\tconst onMouseMove = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n\t\tif(dragging.dragging) {\n\t\t\tsetDragging({\n\t\t\t\t...dragging,\n\t\t\t\tcurrent: {\n\t\t\t\t\tx: e.clientX,\n\t\t\t\t\ty: e.clientY,\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t};\n\tconst onMouseUp = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n\t\tif(dragging.dragging) {\n\t\t\tdispatch!(updatePosition(\n\t\t\t\tuid,\n\t\t\t\tx + dragging.current.x - dragging.initial.x,\n\t\t\t\ty + dragging.current.y - dragging.initial.y\n\t\t\t));\n\t\t\tsetDragging({\n\t\t\t\tdragging: false,\n\t\t\t\tinitial: {\n\t\t\t\t\tx: 0,\n\t\t\t\t\ty: 0,\n\t\t\t\t},\n\t\t\t\tcurrent: {\n\t\t\t\t\tx: 0,\n\t\t\t\t\ty: 0,\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t};\n\n\tconst left = x + dragging.current.x - dragging.initial.x;\n\tconst top =  y + dragging.current.y - dragging.initial.y;\n\n\treturn <div style={{\n\t\tposition: 'absolute',\n\t\tbackground: 'black',\n\t\tuserSelect: 'none',\n\t\tleft: `${left}px`,\n\t\ttop: `${top}px`,\n\t}}\n\tonMouseDown={onMouseDown}\n\tonMouseMove={onMouseMove}\n\tonMouseUp={onMouseUp}\n\t>\n\t\t<span>Uuid: {uid}</span>\n\t\t<div>{children}</div>\n\t</div>\n};\n\nexport const useNode = () => {\n\tconst uid = useUID();\n\t//const context = useContext(GraphContext);\n\n\treturn {\n\t\tNode: ({ ...args }) => <Node uid={uid} {...args} />,\n\t\t//setData: (key, value) => \n\t};\n}\n\nexport default GraphComponent;\n","import React, { useState } from 'react';\nimport Graph, { useNode } from './components/graph';\n\nconst GenericNode1 : React.FC = () => {\n\tconst { Node } = useNode();\t\n\n\treturn <Node>\n\t\t<div style={{ padding: '20px'}}>\n\t\tgeneric node type 1\t\n\t\t</div>\n\t</Node>\n}\n\nconst GenericNode2 : React.FC = () => {\n\tconst { Node } = useNode();\t\n\n\treturn <Node>\n\t\t<div style={{ padding: '20px'}}>\n\t\tgeneric node type 2\t\n\t\t</div>\n\t</Node>\n}\n\nconst App : React.FC = () => {\n\tconst [num, setNum] = useState(0);\n\tconst onClick = () => {\n\t\tsetNum(num + 1);\n\t};\n\n\treturn <div>\n\t\t<Graph width={1200} height={500}>\n\t\t\t<GenericNode1 />\n\t\t\t<GenericNode2 />\n\t\t\t{\n\t\t\t\t'.'.repeat(num).split('').map((_, i) => (\n\t\t\t\t\t<GenericNode2 key={i} />\n\t\t\t\t))\n\t\t\t}\n\t\t</Graph>\n\t\t<button onClick={onClick}>Add new</button>\n\t</div>\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}