{"version":3,"sources":["components/graph.tsx","app.tsx","index.tsx"],"names":["ActionType","initialState","nodes","edges","GraphContext","createContext","graphReducer","state","action","type","UpdatePosition","newState","index","findIndex","node","uid","push","x","y","UpdateAttribute","AddEdge","Node","children","useContext","getPosition","dispatch","onDragDone","useState","dragging","initial","current","setDragging","dragged","onMouseDown","e","clientX","clientY","onMouseMove","onMouseUp","useDraggable","updatePosition","left","top","style","position","background","userSelect","useNode","useUID","args","GraphComponent","width","height","useReducer","Provider","value","find","backgroundColor","color","overflow","GenericNode1","padding","GenericNode2","App","num","setNum","repeat","split","map","_","i","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0c60a180.chunk.js","sourcesContent":["import React, { createContext, useContext, useReducer, useState } from 'react';\nimport { useUID } from 'react-uid';\n\ninterface Graph {\n\tnodes: any[];\n\tedges: any[];\n}\n\nconst initialState : Graph = {\n\tnodes: [],\n\tedges: [],\n}\n\nconst GraphContext = createContext<{\n\tstate?: Graph;\n\tdispatch?: Function;\n\tgetPosition?: Function;\n}>({});\n\nenum ActionType {\n\tUpdatePosition,\n\tUpdateAttribute,\n\tAddEdge,\n\tRemoveEdge,\n};\n\ntype Uid = string;\n\ntype Actions =\n | { type: ActionType.UpdatePosition, uid: Uid, x: Number, y: Number }\n | { type: ActionType.UpdateAttribute, uid: Uid, key: String, value: any }\n | { type: ActionType.AddEdge, fromNode: Uid, toNode: Uid };\n\nconst graphReducer = (state : Graph, action: Actions) => {\n\tswitch(action.type) {\n\t\tcase ActionType.UpdatePosition:\n\t\t\tconst newState = { ...state };\n\t\t\tconst index = state.nodes.findIndex((node) => node.uid === action.uid);\n\t\t\tif(index === -1) {\n\t\t\t\tnewState.nodes.push({uid: action.uid, x: action.x, y: action.y});\n\t\t\t} else {\n\t\t\t\tnewState.nodes[index].x = action.x;\n\t\t\t\tnewState.nodes[index].y = action.y;\n\t\t\t}\n\t\t\treturn newState;\n\t\tcase ActionType.UpdateAttribute:\n\t\tcase ActionType.AddEdge:\n\t\tdefault:\n\t\t\tbreak;\n\t}\n\n\treturn state;\n};\n\nconst updatePosition = (uid: Uid, x: Number, y: Number) => ({ type: ActionType.UpdatePosition, uid, x, y });\n\ninterface GraphComponentProps {\n\twidth: Number,\n\theight: Number,\n}\n\nconst GraphComponent : React.FC<GraphComponentProps> = ({ children, width, height }) => {\n\tconst [state, dispatch] = useReducer(graphReducer, initialState);\n\tconst getPosition = (uid: Uid) => {\n\t\tconst node = state.nodes.find((node) => node.uid === uid);\n\t\tconst defaultValues = { x: 0, y: 0 };\n\t\treturn { ...defaultValues, ...node };\n\t}\n\n\treturn <GraphContext.Provider value={{\n\t\tstate,\n\t\tdispatch,\n\t\tgetPosition,\n\t}}>\n\t\t<div style={{\n\t\t\twidth: `${width}px`,\n\t\t\theight: `${height}px`,\n\t\t\tbackgroundColor: 'darkblue',\n\t\t\tcolor: '#eaeaea',\n\t\t\tposition: 'relative',\n\t\t\toverflow: 'hidden',\n\t\t}}>\n\t\t{children}\n\t\t</div>\n\t</GraphContext.Provider>\n};\n\ninterface NodeProps {\n\tuid: Uid\n}\n\nconst useDraggable = (onDragDone : Function) => {\n\tconst [dragging, setDragging ] = useState({\n\t\tdragging: false,\n\t\tinitial: { x: 0, y: 0 },\n\t\tcurrent: { x: 0, y: 0 },\n\t});\n\tconst onMouseDown = (e : React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n\t\tsetDragging({\n\t\t\tdragging: true,\n\t\t\tinitial: {\n\t\t\t\tx: e.clientX,\n\t\t\t\ty: e.clientY,\n\t\t\t},\n\t\t\tcurrent: {\n\t\t\t\tx: e.clientX,\n\t\t\t\ty: e.clientY,\n\t\t\t}\n\t\t})\n\t};\n\tconst onMouseMove = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n\t\tif(dragging.dragging) {\n\t\t\tsetDragging({\n\t\t\t\t...dragging,\n\t\t\t\tcurrent: {\n\t\t\t\t\tx: e.clientX,\n\t\t\t\t\ty: e.clientY,\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t};\n\tconst onMouseUp = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n\t\tif(dragging.dragging) {\n\t\t\tonDragDone();\n\t\t\tsetDragging({\n\t\t\t\tdragging: false,\n\t\t\t\tinitial: {\n\t\t\t\t\tx: 0,\n\t\t\t\t\ty: 0,\n\t\t\t\t},\n\t\t\t\tcurrent: {\n\t\t\t\t\tx: 0,\n\t\t\t\t\ty: 0,\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t};\n\n\tconst dragged = {\n\t\tx: dragging.current.x - dragging.initial.x,\n\t\ty: dragging.current.y - dragging.initial.y,\n\t}\n\n\treturn { dragged, onMouseDown, onMouseMove, onMouseUp, };\n};\n\nconst Node : React.FC<NodeProps> = ({ children, uid }) => {\n\tconst { getPosition, dispatch } = useContext(GraphContext);\n\tconst { x, y } = getPosition!(uid);\n\tconst { dragged, onMouseDown, onMouseMove, onMouseUp } = useDraggable(() => {\n\t\tdispatch!(updatePosition(\n\t\t\tuid,\n\t\t\tx + dragged.x,\n\t\t\ty + dragged.y,\n\t\t));\n\t});\n\tconst left = x + dragged.x;\n\tconst top =  y + dragged.y;\n\n\treturn <div style={{\n\t\tposition: 'absolute',\n\t\tbackground: 'black',\n\t\tuserSelect: 'none',\n\t\tleft: `${left}px`,\n\t\ttop: `${top}px`,\n\t}}\n\tonMouseDown={onMouseDown}\n\tonMouseMove={onMouseMove}\n\tonMouseUp={onMouseUp}\n\t>\n\t\t<span>Uuid: {uid}</span>\n\t\t<div>{children}</div>\n\t</div>\n};\n\nexport const useNode = () => {\n\tconst uid = useUID();\n\t//const context = useContext(GraphContext);\n\n\treturn {\n\t\tNode: ({ ...args }) => <Node uid={uid} {...args} />,\n\t\t//setData: (key, value) => \n\t};\n}\n\nexport default GraphComponent;\n","import React, { useState } from 'react';\nimport Graph, { useNode } from './components/graph';\n\nconst GenericNode1 : React.FC = () => {\n\tconst { Node } = useNode();\t\n\n\treturn <Node>\n\t\t<div style={{ padding: '20px'}}>\n\t\tgeneric node type 1\t\n\t\t</div>\n\t</Node>\n}\n\nconst GenericNode2 : React.FC = () => {\n\tconst { Node } = useNode();\t\n\n\treturn <Node>\n\t\t<div style={{ padding: '20px'}}>\n\t\tgeneric node type 2\t\n\t\t</div>\n\t</Node>\n}\n\nconst App : React.FC = () => {\n\tconst [num, setNum] = useState(0);\n\tconst onClick = () => {\n\t\tsetNum(num + 1);\n\t};\n\n\treturn <div>\n\t\t<Graph width={1200} height={500}>\n\t\t\t<GenericNode1 />\n\t\t\t<GenericNode2 />\n\t\t\t{\n\t\t\t\t'.'.repeat(num).split('').map((_, i) => (\n\t\t\t\t\t<GenericNode2 key={i} />\n\t\t\t\t))\n\t\t\t}\n\t\t</Graph>\n\t\t<button onClick={onClick}>Add new</button>\n\t</div>\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}